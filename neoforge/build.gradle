plugins {
    id "com.github.johnrengelman.shadow" version "8.0.0"
    id "com.modrinth.minotaur" version "2.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}


def jarFileName = 'letsdo-lilis_lucky_lures-neoforge'
def changelogText = rootProject.file("CHANGELOG.md").text
archivesBaseName = jarFileName


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    neoForge {
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.forge_version}"
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    modImplementation "me.shedaniel:RoughlyEnoughItems-neoforge:$rei_version"
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mod_version            : mod_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    atAccessWideners.add(loom.accessWidenerPath.get().asFile.getName())
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "lets-do-lilis-lucky-lures"
    versionNumber = rootProject.mod_version
    versionName = "${rootProject.archives_base_name}-${rootProject.mod_version} [${rootProject.minecraft_version}-neoforge]"
    versionType = "release"
    changelog = rootProject.file("CHANGELOG.md").exists() ? rootProject.file("CHANGELOG.md").text : " "
    gameVersions = [rootProject.minecraft_version]
    loaders = ["neoforge"]
    uploadFile = remapJar
    additionalFiles = [tasks.sourcesJar.archiveFile]

    dependencies {
        required.project "architectury-api"
    }
}

curseforge {
    apiKey = System.getenv("CURSEFORGE_API_KEY")
    project {
        id = "1197637"
        releaseType = "release"
        addGameVersion rootProject.minecraft_version
        addGameVersion "NeoForge"
        mainArtifact(remapJar) {
            displayName = "Lili's Lucky Lures - ${rootProject.mod_version} - NEOFORGE - ${rootProject.minecraft_version}"
            changelog = changelogText
            changelogType = "markdown"
        }

        relations {
            requiredDependency "architectury-api"
        }
    }
}

